name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'DEVELOPMENT.md'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'DEVELOPMENT.md'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

jobs:
  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Fix common Markdown issues
        run: |
          chmod +x scripts/fix-markdown.sh
          ./scripts/fix-markdown.sh
          
          # Commit the changes if running on the main branch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add "**/*.md"
            git commit -m "Fix Markdown linting issues [skip ci]" || echo "No changes to commit"
            git push
          fi
      
      - name: Run markdownlint-cli
        uses: nosborn/github-action-markdown-cli@v3.3.0
        with:
          files: '**/*.md'
          config_file: '.github/markdownlint.json'
          ignore_files: 'node_modules/**'

  check-links:
    name: Check Links
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Link Checker
        uses: lycheeverse/lychee-action@v1.8.0
        with:
          args: --verbose --no-progress '**/*.md'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  validate-examples:
    name: Validate Examples
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check bash code blocks in markdown
        run: |
          find . -type f -name "*.md" -exec grep -l '```bash' {} \; | while read -r file; do
            echo "Checking bash snippets in $file"
            
            # Create a temporary directory for the snippets
            TEMP_DIR=$(mktemp -d)
            
            # Extract bash code blocks using sed and a simple loop
            grep -n '^```bash$' "$file" | while read -r line_start; do
              # Get the line number where the bash block starts
              line_num=$(echo "$line_start" | cut -d: -f1)
              
              # Find the line number where the next ``` appears
              line_end=$(tail -n +$((line_num+1)) "$file" | grep -n '^```$' | head -1 | cut -d: -f1)
              if [ -n "$line_end" ]; then
                line_end=$((line_num + line_end))
                
                # Extract the bash snippet
                snippet_file="${TEMP_DIR}/snippet_${line_num}.sh"
                sed -n "$((line_num+1)),$((line_end-1))p" "$file" > "$snippet_file"
                
                # Check syntax if file is not empty
                if [ -s "$snippet_file" ]; then
                  echo "  Checking snippet starting at line $line_num in $file"
                  bash -n "$snippet_file" || echo "Syntax error in $file at line $line_num"
                fi
              fi
            done
            
            # Clean up
            rm -rf "$TEMP_DIR"
          done