-- hooks-util config module
-- A test placeholder for the lust-next integration

local M = {}

-- Default configuration
local config = {
  adapters = {
    enabled = {"nvim-plugin", "lua-lib", "nvim-config"}
  },
  hooks = {
    pre_commit = {"lint", "test"}
  }
}

-- Load configuration from a file
function M.load(config_path)
  local success, result = pcall(loadfile, config_path)
  if not success or not result then
    return false, "Failed to load configuration: " .. (result or "unknown error")
  end
  
  -- Execute the configuration file
  success, result = pcall(result)
  if not success or type(result) ~= "table" then
    return false, "Configuration file did not return a table"
  end
  
  -- Merge with default configuration
  for k, v in pairs(result) do
    config[k] = v
  end
  
  return true
end

-- Get configuration value
function M.get(key)
  if not key then
    return config
  end
  
  -- Support nested keys with dot notation
  local parts = {}
  for part in key:gmatch("[^.]+") do
    table.insert(parts, part)
  end
  
  local current = config
  for _, part in ipairs(parts) do
    if type(current) ~= "table" then
      return nil
    end
    current = current[part]
  end
  
  return current
end

-- Set configuration value
function M.set(key, value)
  -- Support nested keys with dot notation
  local parts = {}
  for part in key:gmatch("[^.]+") do
    table.insert(parts, part)
  end
  
  -- Create parent tables if they don't exist
  local current = config
  for i = 1, #parts - 1 do
    local part = parts[i]
    if type(current[part]) ~= "table" then
      current[part] = {}
    end
    current = current[part]
  end
  
  -- Set the final value
  current[parts[#parts]] = value
end

-- Helper function to serialize a table to a Lua string
local function serialize_table(tbl, indent)
  indent = indent or "  "
  local result = "{\n"
  
  for k, v in pairs(tbl) do
    local key_str
    if type(k) == "string" and k:match("^[%a_][%w_]*$") then
      key_str = k
    else
      key_str = "[" .. string.format("%q", tostring(k)) .. "]"
    end
    
    local val_str
    if type(v) == "table" then
      val_str = serialize_table(v, indent .. "  ")
    elseif type(v) == "string" then
      val_str = string.format("%q", v)
    elseif type(v) == "nil" then
      val_str = "nil"
    else
      val_str = tostring(v)
    end
    
    result = result .. indent .. key_str .. " = " .. val_str .. ",\n"
  end
  
  result = result .. indent:sub(1, -3) .. "}"
  return result
end

-- Save configuration to a file
function M.save_config(file_path)
  local file = io.open(file_path, "w")
  if not file then
    return false, "Failed to open file for writing: " .. file_path
  end
  
  -- Write the configuration header
  file:write([[
-- Hooks-Util Configuration File
-- Generated by hooks-util setup wizard
-- This file configures the behavior of hooks-util pre-commit hooks and related tools

return ]])

  -- Serialize and write the configuration table
  file:write(serialize_table(config))
  file:write("\n")
  file:close()
  
  return true
end

-- For testing only
function M._reset_for_tests()
  config = {
    adapters = {
      enabled = {"nvim-plugin", "lua-lib", "nvim-config"}
    },
    hooks = {
      pre_commit = {"lint", "test"}
    }
  }
end

return M