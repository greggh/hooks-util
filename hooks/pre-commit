#!/bin/bash
# Pre-commit hook for Neovim Lua projects
# For all projects including testbeds, use strict error handling
# Testbeds should have the strictest requirements to properly validate hooks-util
set -e
set -o pipefail

# Determine the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Include library files from the hooks-util lib directory
LIB_DIR="$(cd "${SCRIPT_DIR}/lib" && pwd)"
source "${LIB_DIR}/common.sh"
source "${LIB_DIR}/error.sh"
source "${LIB_DIR}/path.sh"
source "${LIB_DIR}/stylua.sh"
source "${LIB_DIR}/luacheck.sh"
source "${LIB_DIR}/shellcheck.sh"
source "${LIB_DIR}/markdown.sh"
source "${LIB_DIR}/yaml.sh"
source "${LIB_DIR}/json.sh"
source "${LIB_DIR}/toml.sh"
source "${LIB_DIR}/test.sh"
source "${LIB_DIR}/quality.sh"
source "${LIB_DIR}/test_quality.sh"

# Print banner
hooks_print_header "Neovim Hooks Utilities Pre-commit Hook v${HOOKS_UTIL_VERSION}"
hooks_debug "Running from: ${SCRIPT_DIR}"

# Get the top level of the git repository
TOP_LEVEL=$(hooks_git_root)
cd "$TOP_LEVEL" || exit 1

# Set TARGET_DIR for use by linting scripts
TARGET_DIR="${TOP_LEVEL}"
export TARGET_DIR
hooks_debug "TARGET_DIR: ${TARGET_DIR}"

# Load configuration
hooks_load_config

# Fix code quality issues in staged files if enabled
if [ "${HOOKS_QUALITY_ENABLED}" = true ]; then
  hooks_fix_staged_quality
  hooks_handle_error $? "Code quality fixes failed"
else
  hooks_debug "Code quality fixes are disabled in configuration"
fi

# Process staged Lua files with StyLua if enabled
if [ "${HOOKS_STYLUA_ENABLED}" = true ]; then
  # Check for stylua
  if ! hooks_command_exists stylua; then
    hooks_error "StyLua is not installed. Please install it to format Lua code."
    hooks_error "You can install it from: https://github.com/JohnnyMorganz/StyLua"
    # Mark this as an error and block the commit
    ((HOOKS_ERROR_COUNT++))
    HOOKS_ERROR_MESSAGES+=("Missing required tool: stylua")
  else
    # Format all staged Lua files
    hooks_stylua_staged
    hooks_handle_error $? "StyLua formatting failed"
  fi
else
  hooks_debug "StyLua formatting is disabled in configuration"
fi

# Run Luacheck on staged Lua files if enabled
if [ "${HOOKS_LUACHECK_ENABLED}" = true ]; then
  # Check for luacheck
  if ! hooks_command_exists luacheck; then
    hooks_warning "Luacheck is not installed. Please install it to lint Lua code."
    hooks_warning "You can install it via LuaRocks: luarocks install luacheck"
    # Mark this as an error but continue - in test environments we need to be lenient
    ((HOOKS_ERROR_COUNT++))
    HOOKS_ERROR_MESSAGES+=("Missing required tool: luacheck")
  else
    # Lint all staged Lua files
    hooks_luacheck_staged
    hooks_handle_error $? "Luacheck validation failed"
  fi
else
  hooks_debug "Luacheck validation is disabled in configuration"
fi

# Run ShellCheck on staged shell script files
# Always run ShellCheck on shell scripts as they are essential to the project
if ! hooks_command_exists shellcheck; then
  hooks_error "ShellCheck is not installed. Please install it to validate shell scripts."
  hooks_error "You can install it via your package manager: apt-get install shellcheck, brew install shellcheck, etc."
  # Mark this as an error and block the commit
  ((HOOKS_ERROR_COUNT++))
  HOOKS_ERROR_MESSAGES+=("Missing required tool: shellcheck")
else
  # Lint all staged shell script files
  hooks_shellcheck_staged
  hooks_handle_error $? "ShellCheck validation failed"
fi

# Process Markdown files if there are any
hooks_markdown_staged
hooks_handle_error $? "Markdown processing failed"

# Process YAML files if there are any
hooks_yaml_staged
hooks_handle_error $? "YAML validation failed"

# Process JSON files if there are any
hooks_json_staged
hooks_handle_error $? "JSON validation failed"

# Process TOML files if there are any
hooks_toml_staged
hooks_handle_error $? "TOML validation failed"

# Run tests if enabled
if [ "${HOOKS_TESTS_ENABLED}" = true ]; then
  # Check if Neovim is available
  if ! hooks_command_exists nvim; then
    hooks_warning "Neovim is not installed. Skipping tests."
  else
    # Run tests
    hooks_run_tests_precommit "$TOP_LEVEL"
    hooks_handle_error $? "Tests failed"
  fi
else
  hooks_debug "Tests are disabled in configuration"
fi

# Run test quality validation if enabled
if [ "${HOOKS_TEST_QUALITY_ENABLED}" = true ]; then
  # Run test quality checks
  hooks_run_test_quality_checks "$TOP_LEVEL"
  hooks_handle_error $? "Test quality validation failed"
else
  hooks_debug "Test quality validation is disabled in configuration"
fi

# Success message if no errors
if [ "${HOOKS_ERROR_COUNT}" -eq 0 ]; then
  hooks_success "All checks passed successfully!"
fi

# Print error summary and exit with appropriate code
hooks_print_error_summary
if [ ${HOOKS_ERROR_COUNT} -gt 0 ]; then
  exit 1
else
  exit 0
fi